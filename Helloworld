# https://machinelearningmastery.com/machine-learning-in-python-step-by-step/
# Load libraries
import pandas as pd
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC



# Load dataset
url = "C:\\Users\\Negar\\Desktop\\iris.xlsx"
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
df = pd.read_excel("C:/Users/Negar/Desktop/iris.xlsx") # ITS going to return a data frame
#print(df.head(5))

#print("\n \n \t", df.shape)

#print("\n \n ", df.describe())

#print("\n \n",df. groupby("species").size())

# box and wiskeler plot
df.plot(subplots='True', layout=(2,2), kind='box', sharex='Fauls')

df.hist()
plt.show()


array = df.values
#print(array)
X=array[:, 0:4]
Y=array[:, 4]
validation_size = 0.20
seed = 5
X_train, X_validation, Y_train, Y_validation = model_selection.train_test_split(X,Y, test_size = validation_size, random_state=seed)


#5.2 Test Harness,We will use 10-fold cross validation to estimate
#accuracy.This will split our dataset into 10 parts, train on 9 and test on 1 and repeat for all combinations of train-test splits.
 
scoring='accuracy'


# Spot Check Algorithms
models = []
models.append(('LR', LogisticRegression()))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC()))
# evaluate each model in turn
results = []
names = []
for name, model in models:
    kfold = model_selection.KFold(n_splits = 10, random_state = seed)
    cv_results = model_selection.cross_val_score(model, X_train,Y_train, cv = kfold, scoring = scoring)
    results.append(cv_results)
    names.append(name)
    msg = "%s: %f (%f)" %(name, cv_results.mean(), cv_results.std())
    print(msg)
    


knn = KNeighborsClassifier()
knn.fit(X_train,Y_train)
predictions = knn.predict(X_validation)
print(accuracy_score(Y_validation,predictions))
print('\n', confusion_matrix(Y_validation,predictions))
print(classification_report(Y_validation,predictions))
